---
title: how to do t-tests
author: Jen Richmond
date: '2023-04-25'
slug: []
categories: []
tags: []
toc: TRUE
---

# Conducting t-tests in R

There are lots of options for doing t-tests in R. Here I am comparing the code and output of 3 different options: `lsr`, `jmv` and `stats`.

I like that the `lsr` and `jmv` have separate functions for each kind of t-test. I can see how that will make it easier for students to think about the differences between each test, and the arguments that each one requires.

The output from the `lsr` is also REALLY nice. It includes useful things like Cohens D by default (whereas you have to add an argument in `jmv`).

Important to make sure you are working with a dataframe though (read the data using read.csv (rather than underscore) or make as.dataframe(). The `lsr` code is old and doesn't deal with tibbles.

Unfortunately only the old school t.test() functions are compatible with the report package, which autowrites results.

#### Code for one sample, paired, and independent samples t-tests using `lsr`

    oneSampleTTest(dataframe$testcolumn, mu=100)

    pairedSamplesTTest(~ variable1 + variable2, dataframe) # note if data is long you also need to specify "id"

    independentSamplesTTest(outcome ~ group, dataframe)

#### Code for doing the same thing using the 'jmv' package

    ttestOneS(dataframe, vars = vars(variable1, variable2), testValue = 100, effectSize = TRUE)

    ttestPS(data = dataframe, pairs = list(list(i1 = 'variable1', i2 = 'variable2')))

    ttestIS(formula = outcome ~ group, data = dataframe) 

#### Code for doing the same thing using the standard `t.test` method

    t.test(dataframe$testcolumn, mu = 100)
    t.test(dataframe$variable1, dataframe$variable2, paired=TRUE)
    t.test(dataframe$outcome ~ dataframe$group, paired=FALSE)

### Analysing the AFL data

The AFL data that comes with Dani's book includes attendance and score information for home and away teams over regular and finals games for years and years. Disclaimer- I know nothing about AFL.

#### Load packages

```{r}
library(tidyverse)
library(lsr)
library(jmv)
```

#### Read the data

Remember: `lsr` package does not like tibbles. Best to use `read.csv` or `as.dataframe` to make sure you are working with a df.

```{r}
afl <- read.csv("afl.csv")

homeawaygames <- afl %>%
  select(home_score, away_score, game_type, attendance)
```

```{r}
names(homeawaygames)
```

### AFL data questions

#### Question 1: does the home team score more than 100 points on average each game?

Maybe we know that the average AFL team scores around 100 points in a game. Do home teams score more than 100?

##### The `lsr` one sample t test

```{r}
oneSampleTTest(homeawaygames$home_score, mu=100)
```

Interesting, on average yes, the home team does score more than 100. What about the away team?

```{r}
oneSampleTTest(homeawaygames$away_score, mu=100)
```

Also significant, but this was a 2 sided test, so this significant result tells us that on average the away team scores significantly less than 100 points.

##### jmv one sample t-test

```{r}
ttestOneS(homeawaygames, vars = vars(home_score, away_score), testValue  = 100, effectSize = TRUE)


```

##### The t.test one sample t test

The format is mostly the same for the t.test version; output not as nice.

```{r}
t.test(homeawaygames$home_score, mu = 100)
t.test(homeawaygames$away_score, mu = 100)
```

# Report one sample t-test

```{r}
library(report)

homeT <- t.test(homeawaygames$home_score, mu = 100)

report(homeT)


```

#### Question 2- do teams playing at home score more than teams playing away?

In the afl dataset, each game (like participant) gives a score for the home team and the away team. In that sense the score data is paired.

##### The `lsr` paired samples t test

The `lsr` package pairedSamplesTest() function looks a bit different if the data is wide vs long. If the data is wide, you need to just tell in the names of the variables to compare and the data set.

    WideTest <- pairedSamplesTTest(
      formula = ~ variable1 + variable2, 
      data = dataframe 
    )

If the data is long, you also need to tell it the 'ID' column.

    LongTest <- pairedSamplesTTest(
      formula = ~ variable1 + variable2, 
      data = dataframe, 
      id = "id" 
    )

Paired samples t test the `lsr` way (longform)

```{r}
pairedSamplesTTest(
formula = ~ home_score + away_score, 
data = homeawaygames 
)
```

Paired samples t test the `lsr` way (shortform)

```{r}
pairedSamplesTTest(~ home_score + away_score, homeawaygames)
```

Take home message, home teams score more points that away teams.

##### The `t.test` paired samples t test

Alternatively the basic t.test function does the same with less digestable output.

    t.test(y1, y2, paired=TRUE)

```{r}
t.test(homeawaygames$home_score, homeawaygames$away_score, paired=TRUE)

```

t.test output definitely not as nice.

#### Question 3: Is attendance higher at finals games than regular season games?

Lets group by game type and calculate the mean number of people attending finals vs regular games. Seems like attendance is higher for finals. Is that significant?

```{r}
homeawaygames %>% 
  group_by(game_type) %>%
  summarise(meanpeople = mean(attendance)) %>%
  ggplot(aes(x = game_type, y= meanpeople)) +
  geom_col()
```

##### The `lsr` independent samples t test

R t-test uses the Welch method (for unequal variance) by default. Need to change var.equal = TRUE to use Student t-test method.

    independentSamplesTTest(
      formula = outcome ~ group, 
      data = dataframe
      var.equal = FALSE
    )

Independent samples t test the `lsr` way (longform)

```{r}
independentSamplesTTest(
  formula = attendance ~ game_type, 
  data = homeawaygames,
  var.equal = FALSE
)
```

Independent samples t test the `lsr` way (shortform)

```{r}
independentSamplesTTest(attendance ~ game_type, homeawaygames)
```

##### The `t.test` independent samples t test

Alternatively the basic t.test function does the same with less digestable output. y1 = outcome, y= group.

    t.test(y1 ~ y2, paired=FALSE)

```{r}
t.test(homeawaygames$attendance ~ homeawaygames$game_type, paired=FALSE, var.equal = FALSE)

```
